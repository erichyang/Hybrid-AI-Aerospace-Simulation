# -*- coding: utf-8 -*-
"""RegressionTraining.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x2xVtl4Dcqvawq3RiMl_cAxhqgq_-_lq
"""

from google.colab import drive
drive.mount('/content/mnt')

"""# Notebook Set Up"""

from __future__ import absolute_import, division, print_function, unicode_literals

import tensorflow as tf

from google.colab import drive

import numpy as np
import pandas as pd
from sklearn import preprocessing
from sklearn import metrics
from keras import backend as K

from itertools import combinations_with_replacement

import os
import datetime
import random

workingDirectory = 'mnt/My Drive/AI Project/CRM Convergence/'
#workingDirectory = '/home/null/CRM Convergence/'

def csv_to_np_array(file_path):
  return np.array(pd.read_csv(file_path))

def shuffle_split(a, seed):
  np.random.seed(seed)
  np.random.shuffle(a)
  temp = np.split(a, indices_or_sections=[0, int(0.2*len(a)+1)])
  return temp[1], temp[2]

tf.keras.optimizers.Adam(learning_rate=0.0000001)

x = csv_to_np_array(workingDirectory + 'parameters.csv')
y = csv_to_np_array(workingDirectory + 'solver_settings.csv')

y = y[:,3:7]

normalize = preprocessing.StandardScaler()
x = normalize.fit_transform(x)
y = normalize.fit_transform(y)

seed = 3192861

xtest, xtrain = shuffle_split(x, seed)
ytest, ytrain = shuffle_split(y, seed)

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard

"""## Training"""

for trials in range(4,5):
  model = tf.keras.models.Sequential()
  model.add(tf.keras.layers.Dense(75, activation = 'relu', input_shape = (2,), kernel_regularizer=tf.keras.regularizers.l2(1)))
  model.add(tf.keras.layers.Dense(4, activation = 'linear', name = 'output'))

  #model.add(tf.keras.layers.Dense(100, activation = 'relu', kernel_regularizer=tf.keras.regularizers.l2(0.01)))
  tensorboard_reg = tf.keras.callbacks.TensorBoard(log_dir="logs/regression" + str(trials))
  model.compile(optimizer = 'Adam', loss = tf.keras.losses.MSE, metrics = ['MSE'])
  model.fit(x=xtrain,y=ytrain, epochs = 100, verbose=2, callbacks=[tensorboard_reg], initial_epoch= 0, validation_data=(xtest, ytest))

"""# Results"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorboard --logdir logs/

#examples = [[7.0, 0.87], [8.0, 0.95], [5.0, 0.5]]
#normalize.inverse_transform

model.predict(xtest)

examples = normalize.fit_transform(np.append([[7.0, 0.87], [8.0, 0.95], [5.0, 0.5]], csv_to_np_array(workingDirectory + 'parameters.csv'),axis=0))[0:3]

examples

temp = np.append(model.predict(xtest),ytrain,axis=0)
predictions = normalize.inverse_transform(temp)[0:18]
ytrue = csv_to_np_array(workingDirectory + 'solver_settings.csv')[0:18,3:7]

xtest

ytrue

model.predict(xtest)

predictions

metrics.mean_squared_error(ytrue, predictions)